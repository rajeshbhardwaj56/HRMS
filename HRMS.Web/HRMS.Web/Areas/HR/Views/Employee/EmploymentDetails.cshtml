﻿@using HRMS.Models.Employee;
@using Microsoft.AspNetCore.Http
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@model EmploymentDetail
@{
    Layout = String.Format("~/Areas/{0}/Views/Shared/_Layout.cshtml", @HttpContextAccessor.HttpContext.Session.GetString(HRMS.Models.Common.Constants.AreaName));
    ViewData["Title"] = "Official Details";
}

<div class="main-header anim" style="--delay: 0s">Official Details 
    <section class="right-button-employee" />
    <a href="~/HR/employee/index/@(Model.EncryptedIdentity)"> <button type="button" class="btn btn-addBtn" id="openFormBtn">Edit</button></a>
    <a href="~/HR/employee/employmentSeparation/@(Model.EncryptedIdentity)">   <button type="button" class="btn btn-addBtn me-2" id="openFormBtn">Add Separation Detail</button></a>
    <a href="~/HR/employee/employmentBankDetails/@(Model.EncryptedIdentity)"> <button type="button" class="btn btn-addBtn" id="openFormBtn">Add Bank Detail</button></a>
</section>
</div>
 
<form method="post" enctype="multipart/form-data">
    <div class="Container">
      

        <div class="group-box anim" style="--delay: .3s">
          


            <div class="small-header">
                @Html.HiddenFor(m => m.EmployeeID)
                @Html.HiddenFor(m => m.EmploymentDetailID)
                @Html.HiddenFor(m => m.UserID)
                @Html.HiddenFor(m => m.CompanyAbbr)
            </div>

            <div class="row">
                <div class="col-md-4 form-group">
                    <label>Employee Number </label>
                    @Html.TextBoxFor(a => a.EmployeNumber, new { @class = "form-control", @readonly = "readonly" })

                </div>
                <div class="col-md-4 form-group">
                    <label>Date of Joining <span class="Mandetory">*</span></label>
                    @Html.TextBoxFor(a => a.JoiningDate, "{0:yyyy-MM-dd}", new { @class = "form-control", @type = "date", @required = "required" })
                    @* @Html.ValidationMessageFor(m => m.JoiningDate) *@
                </div>
                <div class="col-md-4 form-group">
                    <label>Official Email <span class="Mandetory">*</span></label>
                                        @Html.TextBoxFor(a => a.OfficialEmailID, new { @class = "form-control", @type = "text", @required = "required" })                 
                </div>


                <div class="col-md-4 form-group">
                    <label>Official Contact No <span class="Mandetory">*</span> (123-456-7890)</label>
                    @Html.TextBoxFor(a => a.OfficialContactNo, new { @class = "form-control", @type = "tel", @pattern = "[0-9]{3}-[0-9]{3}-[0-9]{4}", @required = "required" })

                </div>
                <div class="col-md-4 form-group">
                    <label>Client Name <span class="Mandetory">*</span></label>
                    @Html.TextBoxFor(a => a.ClientName, new { @class = "form-control", @type = "text", @required = "required" })

                </div>
                <div class="col-md-4 form-group position-relative">
                    <label>Department <span class="Mandetory">*</span></label>
                    <div class="position-relative">
                        @Html.DropDownListFor(x => x.DepartmentID, Model.Departments, HRMS.Models.Common.Constants.SelectDepartment, new
                            {
                                @class = "form-control pe-4", // Add padding to avoid text overlap with the icon
                                @required = "required",
                                @onchange = "fetchSubDepartments(this.value)"
                            })
                        <i class="fa fa-chevron-down position-absolute"
                           style="font-size: 10px;color: gray; right: 10px; top: 50%; transform: translateY(-50%); pointer-events: none;"></i>
                    </div>
                </div>
                <div id="divsubDepartment" class="col-md-4 form-group position-relative" style="display: @(Model.SubDepartmentID != null && Model.SubDepartmentID != 0 ? "block" : "none")">
                    <label>Sub Department <span class="Mandetory">*</span></label>
                    <div class="position-relative">
                        @Html.DropDownListFor(x => x.SubDepartmentID, Model.SubDepartments, HRMS.Models.Common.Constants.SubDepartment, new
                            {
                                @class = "form-control pe-4",  
                                @required = "required",
                            })
                        <i class="fa fa-chevron-down position-absolute"
                           style="font-size: 10px;color: gray; right: 10px; top: 50%; transform: translateY(-50%); pointer-events: none;"></i>
                       </div>
                </div>
                <div class="col-md-4 form-group position-relative">
                    <label>Designation <span class="Mandetory">*</span></label>
                    <div class="position-relative">
                    @Html.DropDownListFor(x => x.DesignationID, Model.Designations, HRMS.Models.Common.Constants.SelectDesignation, new
                        {
                            @class = "form-control",
                            @required = "required",
                            @id = "DesignationDropdown",
                            //@onchange = "fetchReportingManagers(this.value)"
                        })
                    <i class="fa fa-chevron-down position-absolute"
                       style="font-size: 10px;color: gray; right: 10px; top: 50%; transform: translateY(-50%); pointer-events: none;"></i>
                </div>
                </div>              
                <div class="col-md-4 form-group position-relative" id="ReportingManagerDropdownId">
                    <label>Reporting Manager(L1) <span class="Mandetory">*</span></label>
                    <div class="position-relative">
                    @Html.DropDownListFor(x => x.ReportingToIDL1, Model.EmployeeList, HRMS.Models.Common.Constants.SelectReportingManager, new
                        {
                            @class = "form-control",
                            @required = "required",
                            @id = "ReportingManagerDropdown"                             
                        })
                        <i class="fa fa-chevron-down position-absolute"
                           style="font-size: 10px;color: gray; right: 10px; top: 50%; transform: translateY(-50%); pointer-events: none;"></i>
                </div>
                </div>
                <div class="col-md-4 form-group position-relative" id="ReportingManagerDropdownId">
                    <label>Reporting Manager(L2) <span class="Mandetory">*</span></label>
                    <div class="position-relative">
                        <input type="text" id="ReportingManagerL2" class="form-control" readonly="readonly" />
                        <input type="hidden" id="ReportingManagerL2Id" name="ReportingToIDL2" />
                </div>
                </div>
                <div class="col-md-4 form-group position-relative">
                    <label>Job Location <span class="Mandetory">*</span></label>
                    <div class="position-relative">
                        @Html.DropDownListFor(x => x.JobLocationID, Model.JobLocations, HRMS.Models.Common.Constants.SelectJobLocation, new { @class = "form-control", @required = "required" })
                        <i class="fa fa-chevron-down position-absolute"
                           style="font-size: 10px;color: gray; right: 10px; top: 50%; transform: translateY(-50%); pointer-events: none;"></i>
                    </div>
                </div>
                <div class="col-md-4 form-group position-relative">
                    <label>Employment Type <span class="Mandetory">*</span></label>
                    <div class="position-relative">
                    @Html.DropDownListFor(x => x.EmployeeTypeID, Model.EmploymentTypes, HRMS.Models.Common.Constants.SelectEmployeeType, new { @class = "form-control", @required = "required" })
                        <i class="fa fa-chevron-down position-absolute"
                           style="font-size: 10px;color: gray; right: 10px; top: 50%; transform: translateY(-50%); pointer-events: none;"></i>
                </div>
                </div>
                <div class="col-md-4 form-group position-relative">
                    <label>Role Type <span class="Mandetory">*</span></label>
                    <div class="position-relative">
                    @Html.DropDownListFor(x => x.RoleId, Model.RoleList, HRMS.Models.Common.Constants.SelectRole, new { @class = "form-control", @required = "required" })
                        <i class="fa fa-chevron-down position-absolute"
                           style="font-size: 10px;color: gray; right: 10px; top: 50%; transform: translateY(-50%); pointer-events: none;"></i>
                </div>
                </div>


                <div class="col-md-4 form-group position-relative">
                    <label>Payroll Type <span class="Mandetory">*</span></label>
                    <div class="position-relative">
                    @Html.DropDownListFor(x => x.PayrollTypeID, Model.PayrollTypes, HRMS.Models.Common.Constants.SelectPayrollType, new { @class = "form-control", @required = "required" })

                        <i class="fa fa-chevron-down position-absolute"
                           style="font-size: 10px;color: gray; right: 10px; top: 50%; transform: translateY(-50%); pointer-events: none;"></i>
                    </div>
                </div>
               

                <div class="col-md-4 form-group position-relative">
                    <label>Leave Policy <span class="Mandetory">*</span></label>
                    <div class="position-relative">
                    @Html.DropDownListFor(x => x.LeavePolicyID, Model.LeavePolicyList, HRMS.Models.Common.Constants.SelectLeavePolicy, new { @class = "form-control", @required = "required" })
                        <i class="fa fa-chevron-down position-absolute"
                           style="font-size: 10px;color: gray; right: 10px; top: 50%; transform: translateY(-50%); pointer-events: none;"></i>
                </div>
                </div>

                <div class="col-md-4 form-group position-relative" >
                    <label>Shift Type <span class="Mandetory">*</span></label>
                    <div class="position-relative">
                        @Html.DropDownListFor(x => x.ShiftTypeID, Model.ShiftTypes, HRMS.Models.Common.Constants.SelectShiftType, new
                            {
                                @class = "form-control",
                                @required = "required",
                                @id = "ShiftTypeDropdown"
                            })
                        <i class="fa fa-chevron-down position-absolute"
                           style="font-size: 10px;color: gray; right: 10px; top: 50%; transform: translateY(-50%); pointer-events: none;"></i>
                    </div>

               </div>


                <div class="col-md-4 form-group">
                    <label>ESI Number <span class="Mandetory"></span></label>
                    @Html.TextBoxFor(a => a.ESINumber, new { @class = "form-control", @type = "text"  })
                </div>
                <div class="col-md-4 form-group">
                    <label>Registration Date in ESIC <span class="Mandetory"></span></label>
                    @Html.TextBoxFor(a => a.ESIRegistrationDate,"{0:yyyy-MM-dd}", new { @class = "form-control", @type = "date" })
                </div>
               

            <div class="row">
                <div class="col-md-12">
                    <input type="submit" value="Submit" class="btn btn-success" />
                    <button id="cancelButton" class="btn btn-danger" type="reset">Cancel</button>
                </div>
            </div>

        </div>
    </div>
</form>

<script>
    document.getElementById('cancelButton').addEventListener('click', function () {

        window.location.href = '@Url.Action("EmployeeListing", "employee")';
    });
    function fetchSubDepartments(departmentID) {
        if (departmentID) {
            $.ajax({
                url: '/Hr/Employee/FilterEmploymentDetails',
                type: 'GET',
                data: { departmentID: departmentID },
                success: function (response) {
                    $('#divsubDepartment').show();
                    var subDeptDropdown = $('#SubDepartmentID'); // Correct ID for DropDownListFor
                    subDeptDropdown.empty().append('<option value="">Select Sub Department</option>');

                    $.each(response.subDepartments, function (index, item) {
                        subDeptDropdown.append('<option value="' + item.value + '" ' + (item.value == subDeptDropdown.val() ? "selected" : "") + '>' + item.text + '</option>');
                    });
                },
                error: function () {
                    alert('Failed to retrieve subdepartments. Please try again.');
                }
            });
        } else {
            $('#divsubDepartment').hide();
            $('#SubDepartmentID').empty().append('<option value="">Select Sub Department</option>');
        }
    }
        $(document).ready(function () {

        function fetchL2Manager(l1EmployeeId) {
            if (l1EmployeeId) {
                $.ajax({
                    url: '/Hr/Employee/GetL2Manager',
                    type: 'POST',
                    data: { l1EmployeeId: l1EmployeeId },
                    success: function (response) {
                        if (response.success && response.managerId) {
                            $('#ReportingManagerL2').val(response.managerName); // Display name
                            $('#ReportingManagerL2Id').val(response.managerId); // Hidden ID
                        } else {
                            $('#ReportingManagerL2').val('');
                            $('#ReportingManagerL2Id').val('');
                        }
                    },
                    error: function () {
                        alert('Error fetching L2 manager.');
                    }
                });
            }
        }
        $('#ReportingManagerDropdown').change(function () {
            const l1EmployeeId = $(this).val();
            fetchL2Manager(l1EmployeeId);
        });
    setTimeout(function () {
         const preselectedL1 = $('#ReportingManagerDropdown').val();
          console.log("Preselected L1 value on load:", preselectedL1);
         if (preselectedL1) {
             fetchL2Manager(preselectedL1);
         }
     }, 200);
    });
</script>