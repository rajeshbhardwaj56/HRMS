@using HRMS.Models.Common;
<link href="~/assets/pages/gridlist.css" rel="stylesheet" />

@model Results
@{
    Layout = "~/Areas/Employee/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Attendance List";

    var success = TempData["Success"];
    var Err = TempData["Error"];
}


<div class="main-header anim" style="--delay: 0s">My Attendance List  <a href="~/Employee/Attendance/MyAttendance"> <button type="button" class="btn btn-addBtn" id="openFormBtn">Add Attendence</button></a></div>

<div class="table-responsive py-3">
    <table id="tblAttendenceListing" class="table table-striped body-text" style="width:100%">
        <thead>
            <tr>
                <th class="first" style="visibility:hidden" /th>
                <th>Name</th>
                <th>AttendenceDate</th>
                <th>First Login </th>
                <th>Last Login</th>
                <th>Manager L1 Name</th>
                <th>Manager L2 Name</th>
                <th>Status</th>
                <th>Comments</th>
                <th>Action</th>
            </tr>
        </thead>

    </table>
</div>
<script type="text/javascript">
 
    var managerNameL1 = '@Html.Raw(ViewBag.ManagerL1)';
    var managerNameL2 = '@Html.Raw(ViewBag.ManagerL2)';
    $(document).ready(function () {
       
        $('#tblAttendenceListing').DataTable({
            "ajax": {
                "url": "GetMyAttendenceList/",
                "type": "POST",
                "datatype": "json",
                "dataSrc": function (json) {
                    var attendances = json.data.attendances;
                    for (var i = 0; i < attendances.length; i++) {
                        attendances[i].managerNameL1 = managerNameL1;  
                        attendances[i].managerNameL2 = managerNameL2;   
                    }

                    return attendances;   
                }
            },
            "ordering": true,
            "paging": true,
            "searching": true,
            "info": true,
            "columns": [
                { "data": "id", "autoWidth": true },  // ID
                { "data": "employeeName", "autoWidth": true },  // Employee Name
                {
                    "data": "workDate", "autoWidth": true,  // Work Date
                    "render": function (data, type, row) {
                        if (data) {
                            var date = new Date(data);
                            var formattedDate = date.getFullYear() + '-' + (date.getMonth() + 1).toString().padStart(2, '0') + '-' + date.getDate().toString().padStart(2, '0');
                            return formattedDate;
                        }
                        return '';  // If no date is provided
                    }
                },
                {
                    "data": "firstLogDate",
                    "autoWidth": true,  // First Log Date
                    "render": function (data, type, row) {
                        if (data) {
                            var date = new Date(data);

                            // Format the date (YYYY-MM-DD)
                            var formattedDate = date.getFullYear() + '-' +
                                (date.getMonth() + 1).toString().padStart(2, '0') + '-' +
                                date.getDate().toString().padStart(2, '0');

                            // Get hours, minutes, and seconds in 12-hour format
                            var hours = date.getHours();
                            var minutes = date.getMinutes().toString().padStart(2, '0');
                            var seconds = date.getSeconds().toString().padStart(2, '0');

                            // Convert to 12-hour format
                            var ampm = hours >= 12 ? 'PM' : 'AM';
                            hours = hours % 12 || 12;  // Convert 0 to 12 for 12-hour format

                            // Format time with AM/PM
                            var formattedTime = hours.toString().padStart(2, '0') + ':' + minutes + ':' + seconds + ' ' + ampm;

                            return formattedDate + ' ' + formattedTime;  // Return formatted date and time
                        }
                        return '';  // If no date is provided
                    }
                }
                ,
                {
                    "data": "lastLogDate", "autoWidth": true,  // Last Log Date
                    "render": function (data, type, row) {
                        if (data) {
                            var date = new Date(data);

                            // Format the date (YYYY-MM-DD)
                            var formattedDate = date.getFullYear() + '-' +
                                (date.getMonth() + 1).toString().padStart(2, '0') + '-' +
                                date.getDate().toString().padStart(2, '0');

                            // Get hours, minutes, seconds in 12-hour format
                            var hours = date.getHours();
                            var minutes = date.getMinutes().toString().padStart(2, '0');
                            var seconds = date.getSeconds().toString().padStart(2, '0');

                            // Convert to 12-hour format
                            var ampm = hours >= 12 ? 'PM' : 'AM';
                            hours = hours % 12 || 12;  // Convert 0 to 12 for 12-hour format

                            // Format time with AM/PM
                            var formattedTime = hours.toString().padStart(2, '0') + ':' + minutes + ':' + seconds + ' ' + ampm;

                            return formattedDate + ' ' + formattedTime;  // Return formatted date and time
                        }
                        return '';  // If no date is provided
                    }
                }
                ,
                { "data": "managerNameL1", "autoWidth": true },
                { "data": "managerNameL2", "autoWidth": true },
                { "data": "attendanceStatus", "autoWidth": true },
                { "data": "comments", "autoWidth": true },
                {
                    mRender: function (data, type, row) {
                        var linkEdit = '<div class="table-data-feature"><a data-toggle="tooltip" data-placement="top" class="item" href="MyAttendance?id=' + row.encodedId + '" title="" data-original-title="Edit"><img src="/assets/img/edit.png" width="20" height="20" /></a>';
                              var linkDelete = '<a href="#" class="preview-btn" data-id="' + row.encodedId + '" title="Preview"><img title="Approve" src="/assets/img/delete.png" width="20" height="20"margin-top=""margin-top="5px" /></a>';
                        return linkEdit + linkDelete + '</div>';
                    }
                },
            ],
            "columnDefs": [
                {
                    "targets": [0], // ID column
                    "visible": false // Hide this column
                }
            ],
            "responsive": true
        });
         $('#tblAttendenceListing').on('click', '.preview-btn', function (e) {
        e.preventDefault();
        var encodedId = $(this).data('id');

        if (confirm("Are you sure you want to delete this?")) {
            window.location.href = "/Employee/Attendance/DeleteAttendanceDetails?id=" + encodedId;
        }
    });

    });
     

</script> 