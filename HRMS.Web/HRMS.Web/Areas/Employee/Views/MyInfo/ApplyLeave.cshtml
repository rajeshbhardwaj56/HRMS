@using HRMS.Models;
@using HRMS.Models.Common;
@using System.Globalization;
@using HRMS.Models.MyInfo;
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Configuration
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject IConfiguration _configuration
@model MyInfoResults
@{
	SelectListItem selectCountry = @Model.employeeModel.Countries.Where(x => x.Value == Model.employeeModel.CorrespondenceCountryID.ToString()).FirstOrDefault();

	SelectListItem selectPermanentCountry = @Model.employeeModel.Countries.Where(x => x.Value == Model.employeeModel.PermanentCountryID.ToString()).FirstOrDefault();
	SelectListItem employmentHistoryCountry;
	var CountryData = @Model.employeeModel.Countries;
	Layout = String.Format("~/Areas/{0}/Views/Shared/_Layout.cshtml", @HttpContextAccessor.HttpContext.Session.GetString(HRMS.Models.Common.Constants.AreaName));
	var RoleName = Convert.ToInt64(this.Context.Session.GetString(Constants.RoleID));
	ViewData["Title"] = "Apply Leave";
	var ProfilePhoto = "";
	if (!string.IsNullOrEmpty(Model.employeeModel.ProfilePhoto))
	{
		ProfilePhoto = this.HttpContextAccessor.HttpContext.Session.GetString(Constants.ProfilePhoto);
	}
	else
	{
		ProfilePhoto = HRMS.Models.Common.Constants.NoImagePath;
	}
	var UploadCertificate = "";
	if (!string.IsNullOrEmpty(Model.leaveResults.leaveSummaryModel.UploadCertificate))
	{
		UploadCertificate = Model.leaveResults.leaveSummaryModel.UploadCertificate;
	}
	else
	{
		UploadCertificate = HRMS.Models.Common.Constants.NoImagePath;
	}
	if (Model.leaveResults.leaveSummaryModel.StartDate == DateTime.MinValue)
	{
		Model.leaveResults.leaveSummaryModel.StartDate = DateTime.Now;
	}
	if (Model.leaveResults.leaveSummaryModel.EndDate == DateTime.MinValue)
	{
		Model.leaveResults.leaveSummaryModel.EndDate = DateTime.Now;
	}
	if (Model.leaveResults.leaveSummaryModel.HalfDayDate == DateTime.MinValue)
	{
		Model.leaveResults.leaveSummaryModel.HalfDayDate = DateTime.Now;
	}
	if (Model.leaveResults.leaveSummaryModel.ExpectedDeliveryDate == DateTime.MinValue)
	{
		Model.leaveResults.leaveSummaryModel.ExpectedDeliveryDate = DateTime.Now;
	}
	if (Model.leaveResults.leaveSummaryModel.ChildDOB == DateTime.MinValue)
	{
		Model.leaveResults.leaveSummaryModel.ChildDOB = DateTime.Now;
	}
	var fullDayValue = (int)LeaveDay.FullDay;
	var halfDayValue = (int)LeaveDay.HalfDay;
	var filteredLeaveTypes = Model.leaveResults.leaveTypes;

	if (Model.CampOffLeaveCount <= 0)
	{
		filteredLeaveTypes = filteredLeaveTypes
			.Where(lt => !lt.Text.Equals("Compensatory Off", StringComparison.OrdinalIgnoreCase))
			.ToList();
	}
		  
																						 
}

@functions {
	public string DisplayValue(string value)
	{
		return string.IsNullOrWhiteSpace(value) ? "N/A" : value;
	}
}
<style>
	.leave-section-tabs {
		/* background-color: #05397b; */
		border-radius: 5px 5px 0px 0px;
	
		color: white;
		border: none;
	}
	.fade:not(.show) {
		opacity: 0;
		display: none !important;
	}
</style>
@* <div class="main-header anim" style="--delay: 0s">My Info</div> *@


<section class="upper-section d-flex">

	<div class="container-fluid">
		<div class="profile-header d-flex ">
			<div class="profile-header-img">
				<img src="@ProfilePhoto" onerror="this.onerror=null; this.src='@(HRMS.Models.Common.Constants.NoImagePath)'" class="rounded-circle fixed z-5" />
			</div>
			<div class="profile-header-small-info">
				<h2>@(Model.employeeModel.FirstName) @(Model.employeeModel.MiddleName) @(Model.employeeModel.Surname)</h2>
				<p class="joiningDate">
					<b>Joining Date:</b> &nbsp;
					@if (Model.employmentDetail.JoiningDate != null)
					{
						@Convert.ToDateTime(Model.employmentDetail.JoiningDate).ToString("ddd, dd MMM yyyy")
						;


						DateTime zeroTime = new DateTime(1, 1, 1);
						DateTime TodayDate = DateTime.Now;
						DateTime JoiningDate = Convert.ToDateTime(Model.employmentDetail.JoiningDate);
						TimeSpan span = TodayDate - JoiningDate.Date;
						int years = (zeroTime + span).Year - 1;
						var Month = (TodayDate - JoiningDate.AddYears(years));
						var Days = (TodayDate - JoiningDate.AddYears(years)).Days;
						<span>@(years)y - @(Days)d</span>

					}

					else
					{
						<span class="Joiningnotavailable">Joining date not available. Please contact your administrator.</span>
					}
				</p>


				<div class="myinfo-menu">
					<ul class="nav nav-tabs leave-section-tabs " id="myTab1" role="tablist">					
						@if (Model.employmentDetail.JoiningDate != null)
						{
							if (Model.employeeModel.LeavePolicyID > 0)
							{
								
									<li class="nav-item" role="presentation">
										<a class="nav-link section-link active" id="home-tab1" data-bs-toggle="tab" data-bs-target="#@(MyInfoTabs.TabLeaveInfo)" role="tab" aria-controls="@(MyInfoTabs.TabLeaveInfo)" aria-selected="true" >Leave Info</a>
									</li>
								

							}
							else
							{
								<li class="nav-item" role="presentation">
									<a class="nav-link section-link active" href="javascript:void(0);" aria-selected="true" onclick="alert('Leave Policy not available. Please contact your administrator.');">Leave Info</a>
								</li>
							}
						}
						else
						{
							<li class="nav-item" role="presentation">
								<a class="nav-link section-link active" href="javascript:void(0);" aria-selected="true" onclick="alert('Joining date not available. Please contact your administrator.');">Leave Info</a>
							</li>
						}


					</ul>
				</div>
			</div>
		</div>
	</div>
</section>
<section class="lower-section">
	<div class="container-fluid">
		<div class="row">
			<div class="col-md-12 py-4">
				<div class="tab-content" id="myTabContentSection">
					<div class="tab-pane fade active show" id="timeoff" role="tabpanel" aria-labelledby="timeoff-tab">
						<div class="row">
							<div class="col-lg-12">

							

								<div class="tab-pane fade show active" id="@(MyInfoTabs.TabLeaveInfo)" role="tabpanel" aria-labelledby="@(MyInfoTabs.TabLeaveInfo)-tab">

									<div class="group-box anim">
										<div class="tabsInfo" id="">
											<h3>Leave Info</h3>
											<nav>
												<div class="nav nav-tabs mb-3" id="myTab-timeoff" role="tablist">
													<button class="nav-link active" id="apply-leave-tab1" data-bs-toggle="tab" data-bs-target="#apply-leave-tab" type="button" role="tab" aria-controls="apply-leave-tab" aria-selected="true">Apply Leave</button>
													<button class="nav-link  " id="leave-summary-tab1" data-bs-toggle="tab" data-bs-target="#leave-summary-tab" type="button" role="tab" aria-controls="leave-summary-tab" aria-selected="false">Leave Summary</button>
												</div>
											</nav>
											<div class="tab-content" id="nav-tabContent">
												<div class="tab-pane fade show active" id="apply-leave-tab" role="tabpanel" aria-labelledby="apply-leave-tab1">
													<div class="row">
														<div class="col-lg-8">

															<div class="">
																<div class="">
																	@*  <form class="body-text" method="post" enctype="multipart/form-data"> *@
																	<form id="myForm" method="post" enctype="multipart/form-data" action="/employee/myinfo/ApplyLeave/">



																		<div id="responseMessage" class="error-message" style=" color: red;font-size: 15px;font-weight: 700;">                                                                        </div>                                                                        <div class="row py-2">



																			<div class="col-lg-6 col-md-12">
																				<label for="leavetype" class="">Leave Type:</label>
																				@Html.HiddenFor(x => x.leaveResults.leaveSummaryModel.CompanyID)
																				@Html.HiddenFor(x => x.leaveResults.leaveSummaryModel.LeaveSummaryID)
																				@Html.HiddenFor(x => x.leaveResults.leaveSummaryModel.EmployeeID)
																				@Html.HiddenFor(x => x.leaveResults.leaveSummaryModel.UserID)
																				@Html.HiddenFor(x => x.leaveResults.leaveSummaryModel.UploadCertificate)
																				@Html.HiddenFor(x => x.CampOffLeaveCount)
																				@Html.DropDownListFor(
																																						x => x.leaveResults.leaveSummaryModel.LeaveTypeID,
																																						filteredLeaveTypes,
																																						HRMS.Models.Common.Constants.SelectLeaveType,
																																						new { @class = "form-control", @required = "required", @id = "leaveTypeDropdown" }
																																						)
																			</div>
																			<div class="col-lg-6 col-md-12" id="leaveDurationContainer">
																				<label for="leavetype" class="">Leave Duration:</label>
																				@Html.DropDownListFor(x => x.leaveResults.leaveSummaryModel.LeaveDurationTypeID, Model.leaveResults.leaveDurationTypes, HRMS.Models.Common.Constants.SelectLeaveDurationType, new { @class = "form-control", @id = "leaveDurationDropdown" })
																			</div>
																			<div class="col-lg-6 col-md-12" id="ChildDOBDateContainer">
																				<!-- New ID for toggling -->
																				<label for="datepicker2" class="">Child DOB:</label>
																				<i class="bi bi-info-circle" data-bs-toggle="tooltip" title="Paternity leave is available for childbirth, miscarriage, or adoption and must be used within 3 months of ChildDOB." style="cursor: pointer; margin-left: 5px;"></i>
																				<div class="position-relative">
																					<div class="input-group date" id="datepickerdiv3">
																						@Html.TextBoxFor(a => a.leaveResults.leaveSummaryModel.ChildDOB, "{0:yyyy-MM-dd}", new { @class = "form-control body-text", @type = "date", @min = DateTime.Now.AddMonths(-3).ToString("yyyy-MM-dd"), })
																					</div>
																				</div>
																			</div>
																		</div>
																		<div class="row py-2 fullDayContainer" id="fullDayContainer">
																			<div class="col-lg-6 col-md-12" id="fromdatetime">
																				<label for="datepicker1" class="">From:</label>
																				<div class="position-relative">
																					<div class="input-group date" id="datepickerdiv1">
																						@Html.TextBoxFor(a => a.leaveResults.leaveSummaryModel.StartDate, "{0:yyyy-MM-dd}", new
																							{
																								@class = "form-control body-text",
																								@type = "date",
																								@min = DateTime.Now.AddMonths(-1).ToString("yyyy-MM-dd") 
																							})
																							 

																					 

																					</div>
																				</div>
																			</div>

																			<div class="col-lg-6 col-md-12" id="todatetime">
																				<label for="datepicker2" class="">To:</label>
																				<div class="position-relative">
																					<div class="input-group date" id="datepickerdiv2">
																				@* 	@Html.TextBoxFor(a => a.leaveResults.leaveSummaryModel.EndDate, "{0:yyyy-MM-dd}", new { @class = "form-control body-text", @type = "date", @min = DateTime.Now.ToString("yyyy-MM-dd"), })
 *@

																						@Html.TextBoxFor(a => a.leaveResults.leaveSummaryModel.EndDate, "{0:yyyy-MM-dd}", new
																							{
																								@class = "form-control body-text",
																								@type = "date",
																								@min = DateTime.Now.AddMonths(-1).ToString("yyyy-MM-dd") 
																							})
																					</div>
																				</div>
																			</div>
																		</div>

																		<div class="row py-2 halfDayContainer" id="halfDayContainer">
																			<div class="col-lg-6 col-md-12">
																				<label for="datepicker1" class="">Date:</label>
																				<div class="position-relative">
																					<div class="input-group date" id="datepickerdiv1">
																						@Html.TextBoxFor(a => a.leaveResults.leaveSummaryModel.HalfDayDate, "{0:yyyy-MM-dd}", new { @class = "form-control body-text", @type = "date", @min = DateTime.Now.ToString("yyyy-MM-dd") })
																					</div>
																				</div>
																			</div>

																		</div>
																		<div class="row py-2 MaternityAdoptionMiscarrageContainer " id="MaternityAdoptionMiscarrageContainer">
																			<div class="col-lg-6 col-md-12" id="expectedDeliveryDateContainer">
																				<!-- New ID for toggling -->
																				<label for="datepicker2" class="">Expected Delivery Date:</label>
																				<i class="bi bi-info-circle" data-bs-toggle="tooltip" title="You are entitled to 26 weeks of maternity leave, with up to 8 weeks allowed before the delivery date." style="cursor: pointer; margin-left: 5px;"></i>

																				<div class="position-relative">
																					<div class="input-group date" id="datepickerdiv3">
																						@Html.TextBoxFor(a => a.leaveResults.leaveSummaryModel.ExpectedDeliveryDate, "{0:yyyy-MM-dd}", new { @class = "form-control body-text", @type = "date", @min = DateTime.Now.ToString("yyyy-MM-dd"), })
																					</div>
																				</div>
																			</div>
																			<div class="col-lg-6 col-md-12">
																				<label>Upload Certificate:</label>
																				<div class="position-relative">
																					<div class="input-group ">
																						@* <img src="@Model.leaveResults.leaveSummaryModel.UploadCertificate" onerror="this.onerror=null; this.src='@(HRMS.Models.Common.Constants.NoImagePath)'" style="width:100px; height:100px" />  *@

																						<input type="file" name="postedFiles" class="form-control body-text" />
																						@if (Model.leaveResults.leaveSummaryModel.UploadCertificate != null && Model.leaveResults.leaveSummaryModel.UploadCertificate != "")
																						{
																							<p> <i class="fa fa-file-pdf-o" style="font-size: 40px; color: red;"></i></p>
																						}

																					</div>
																				</div>
																			</div>

																		</div>

																		<div class="row py-3 mb-1">
																			<div class="col-lg-12">
																				<label for="Reason" class="">Reason:</label>
																				<div class="input-group">
																					@*  <span class="input-group-text body-text">Reason</span> *@
																					@Html.TextAreaFor(a => a.leaveResults.leaveSummaryModel.Reason, new { @class = "form-control", @required = "required" })
																				</div>
																			</div>
																		</div>

																		<button class="btn btn-success" id="submitbtn" type="submit">Submit</button>
																		<a href="~/employee/MyInfo/ApplyLeave/" class="btn btn-danger" type="reset">Cancel</a>
																	</form>
																</div>
															</div>
														</div>
														<div class="col-lg-4 px-4">
															<div class="card mb-3" style="height:86px;">
																<div class="card-body">
																	<ul class="list-group" style="width:100%;">
																		<li class="d-flex justify-content-between align-items-center ">
																			<b>Annual Leave Balance</b>
																			<span class="badge rounded-pill" style="background-color: #05397b">@ViewBag.TotalLeave/@ViewBag.TotalAnnualLeave</span>
																		</li>
																		<li class="d-flex justify-content-between align-items-center " style="margin-top: 9px;
																		">
																			<b>Comp off Leave Balance</b>
																			<span class="badge rounded-pill" style="background-color: #05397b">@Model.CampOffLeaveCount</span>
																		</li>
																	</ul>
																</div>
															</div>


															<div class="card p-3">
																<div class="accordion accordion-flush" id="accordionFlushExample">
																	<div class="accordion-item">
																		<h2 class="accordion-header" id="flush-headingOne">
																			<button class="accordion-button collapsed   z-0 mb-0" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne">
																				Holiday List
																			</button>
																		</h2>
																		<div id="flush-collapseOne" class="accordion-collapse collapse" aria-labelledby="flush-headingOne" data-bs-parent="#accordionFlushExample">
																			<div class="mt-3">
																				<ul class="list-group ">
																					@foreach (var item in Model.HolidayModel)
																					{
																						<li class="list-group-item holiday-list d-flex justify-content-between align-items-center">
																							<span class="small">
																								@if (item.FromDate.Date == item.ToDate.Date)
																								{
																									@item.FromDate.ToString("dd-MMM-yyyy")
																								}
																								else
																								{
																									@($"{item.FromDate:dd-MMM-yyyy} to {item.ToDate:dd-MMM-yyyy}")
																								}
																							</span>
																							<span class="badge holiday-list-text bg-primary rounded-pill">@item.HolidayName</span>
																						</li>
																					}
																				</ul>
																			</div>
																		</div>
																	</div>
																</div>
															</div>

														</div>
													</div>

												</div>
												<div class="tab-pane fade" id="leave-summary-tab" role="tabpanel" aria-labelledby="leave-summary-tab1">

													<div class="row">
														<div class="col-12 col-lg-12">
															<div class="table-responsive">
																<table class="table table-striped body-text dataTable no-footer">
																	<thead>
																		<tr>
																			<th>Request Date</th>
																			<th>Start Date</th>
																			<th>End Date</th>
																			<th>Type</th>
																			<th>Days</th>
																			<th>Status</th>
																			<th>Actions</th>
																		</tr>
																	</thead>
																	<tbody>
																		@foreach (var item in Model.leaveResults.leavesSummary)
																		{
																			<tr>
																				<td>@item.RequestDate.ToString("MM/dd/yyyy hh:mm tt")</td>
																				<td>@item.StartDate.ToString("dd/M/yyyy", CultureInfo.InvariantCulture)</td>
																				<td>@item.EndDate.ToString("dd/M/yyyy")</td>
																				<td>@item.LeaveTypeName</td>
																				<td>
																					@*                                            <span class="fw-bold text-primary " data-bs-toggle="tooltip" title="You are only apply 3 Consecutive leaves." style="cursor: pointer; margin-left: 5px; background: red; color: white !important;">

                                                                                @item.NoOfDays
                                                                                </span> *@

																					@if (@item.LeaveTypeID == (int)LeaveType.AnnualLeavel && @item.NoOfDays > @ViewBag.ConsecutiveAllowedDays)
																					{
																						<span class="fw-bold text-primary" data-bs-toggle="tooltip" title="Exceeding maximum consecutive allowed @ViewBag.ConsecutiveAllowedDays days limit" style="cursor: pointer; background: red; color: white !important;">
																							@item.NoOfDays
																						</span>
																					}
																					else if (@item.LeaveTypeID == (int)LeaveType.MedicalLeave && @item.NoOfDays > @Convert.ToInt32(MaxMedicalLeaveDoc.MaxMedicalDoc))
																					{
																						<span class="fw-bold text-primary" data-bs-toggle="tooltip" title="Document required for more than @Convert.ToInt32(MaxMedicalLeaveDoc.MaxMedicalDoc) days medical leave" style="cursor: pointer; background: red; color: white !important;">
																							@item.NoOfDays
																						</span>
																					}
																					else
																					{
																						<span class="fw-bold text-primary">
																							@item.NoOfDays
																						</span>
																					}
																				</td>
																				@switch (item.LeaveStatusID)
																				{
																					case (int)LeaveStatus.Approved:
																						<td><span class="fw-bold text-success">@item.LeaveStatusName</span></td>
																						break;
																					case (int)LeaveStatus.PendingApproval:
																						<td><span class="fw-bold text-primary">@item.LeaveStatusName</span></td>
																						break;
																					case (int)LeaveStatus.NotApproved:
																						<td><span class="fw-bold text-danger">@item.LeaveStatusName</span></td>
																						break;
																					case (int)LeaveStatus.Cancelled:
																						<td><span class="fw-bold text-danger">@item.LeaveStatusName</span></td>
																						break;
																				}

																				@if (item.LeaveStatusID != (int)LeaveStatus.Approved && item.LeaveStatusID != (int)LeaveStatus.Cancelled)
																				{
																					<td>
																						<a href="~/employee/MyInfo/ApplyLeave/?id=@(item.EncryptedIdentity)" id="editButton" class="edit-button"><i class="fa fa-edit" style="font-size:20px;color:blue;"></i></a> &nbsp;

																						<form action="/employee/MyInfo/DeleteLeavesSummary" method="post" style="display:inline;">
																							<input type="hidden" name="id" value="@item.EncryptedIdentity" />
																							<button type="submit" id="DeleteButton" onclick="return confirm('Are you sure you want to delete this item?');">
																								<i class="fa fa-close" style="font-size:22px;color:red"></i>
																							</button>
																						</form>


																					</td>
																				}
																				else if (item.LeaveStatusID == (int)LeaveStatus.Approved)
																				{
																					<td>
																						<form action="/employee/MyInfo/UpdateLeaveStatus" method="post" style="display:inline;">
																							<input type="hidden" name="id" value="@item.EncryptedIdentity" />
																							<button type="submit" id="DeleteButton" onclick="return confirm('Are you sure you want to cancel this leave?');">
																								<i class="fa fa-close" style="font-size:22px;color:red"></i>
																							</button>
																						</form>
																					</td>
																				}
																				else
																				{
																					<td>  </td>
																				}

																			</tr>
																		}

																	</tbody>
																</table>
															</div>
														</div>
													</div>
												</div>
											</div>

										</div>
									</div>


								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>


<input type="hidden" id="leaveSummaryID" value="" />
<input type="hidden" id="leaveTypeID" value="" />
<script type="text/javascript">
	var leaveSummaryID;
	 function UploadCertificatePreview(event) {
		const file = event.target.files[0];
		if (file) {
			const previewImage = document.getElementById('UploadCertificatePreviewImage');
			const previewPDF = document.getElementById('UploadCertificatePreviewPDF');
			const reader = new FileReader();

			reader.onload = function (e) {
				const result = e.target.result;

				if (file.type.startsWith('image/')) {
					previewImage.src = result;
					previewImage.style.display = 'block';
					previewPDF.style.display = 'none';
				} else if (file.type === 'application/pdf') {
					previewPDF.src = result;
					previewPDF.style.display = 'block';
					previewImage.style.display = 'none';
				} else {
					alert('Unsupported file type. Please upload an image or PDF.');
					previewImage.style.display = 'none';
					previewPDF.style.display = 'none';
				}
			};

			reader.readAsDataURL(file);
		}
	}
	window.onload = function () {
		const certPath = '@Html.Raw(Model.leaveResults.leaveSummaryModel.UploadCertificate)';
		const certFilePath = certPath.toLowerCase();
		const certImg = document.getElementById('UploadCertificatePreviewImage');
		const certPdf = document.getElementById('UploadCertificatePreviewPDF');

		if (certFilePath.includes('.pdf')) {
			certPdf.src = certPath;
			certPdf.style.display = 'block';
			certImg.style.display = 'none';
		} else if (certPath) {
			certImg.src = certPath;
			certImg.style.display = 'block';
			certPdf.style.display = 'none';
		}
	};	 	
	
	$(document).ready(function () {
		$('[data-bs-toggle="tooltip"]').tooltip();
	});
	document.addEventListener('DOMContentLoaded', function () {
	
		var subTabs = document.querySelectorAll('#myTab-timeoff .nav-link'); 
	subTabs.forEach(function (subTab) {
		subTab.addEventListener('click', function () {
			localStorage.setItem('selectedSubTab', subTab.getAttribute('data-bs-target'));
		});
	});

	
	var activeSubTab = localStorage.getItem('selectedSubTab');
	if (activeSubTab) {
		var targetSubTab = document.querySelector(`[data-bs-target="${activeSubTab}"]`);
		if (targetSubTab) {
			var tab = new bootstrap.Tab(targetSubTab);
			tab.show();
		}
	}

		
		document.querySelectorAll('.edit-button').forEach(function (button) {
			button.addEventListener('click', function (event) {
				event.preventDefault(); // Prevent immediate navigation to allow custom actions

				// Update local storage
				localStorage.removeItem('selectedSubTab');
				localStorage.setItem('selectedSubTab', '#apply-leave-tab');

				// Show the "Apply Leave" tab
				var applyLeaveTab = new bootstrap.Tab(document.querySelector('#apply-leave-tab1'));
				applyLeaveTab.show();
					
				// Navigate to the href link
				const href = button.getAttribute('href');
				if (href) {
					window.location.href = href; // Perform navigation
				}
			});
		});




	});
	document.getElementById("myForm").onsubmit = async function (event) {
		event.preventDefault();
		const responseMessage = document.getElementById("responseMessage");
		responseMessage.textContent = "";
		responseMessage.className = "";
		const formData = new FormData(this);
		const response = await fetch(this.action, {
			method: 'POST',
			body: formData
		});
		const result = await response.json();
		if (result.isValid) {
			$.toast({
				heading: 'Success',
				text: result.message,
				showHideTransition: 'slide',
				icon: 'success',
				position: 'top-right',
			});
			setTimeout(function () {
				window.location.href = "/employee/myinfo/ApplyLeave/";
			}, 1000);
			// responseMessage.textContent = result.message;
			// responseMessage.className = "success-message";
			// this.reset(); // Optionally reset the form fields
		} else {
			// Display error message
			responseMessage.textContent = result.message;
			responseMessage.className = "error-message";
		}
	};
</script>
<script>
	function PanPostedFilePreview(event) {
		const file = event.target.files[0];
		if (file) {
			const previewImage = document.getElementById('PanpreviewImage');
			const pdfPreview = document.getElementById('PanpreviewPDF');
			const reader = new FileReader();

			reader.onload = function (e) {
				const result = e.target.result;

				if (file.type.startsWith('image/')) {
					previewImage.src = result;
					previewImage.style.display = 'block';
					pdfPreview.style.display = 'none';
				} else if (file.type === 'application/pdf') {
					pdfPreview.src = result;
					pdfPreview.style.display = 'block';
					previewImage.style.display = 'none';
				} else {
					alert('Unsupported file type. Please upload an image or a PDF.');
					previewImage.style.display = 'none';
					pdfPreview.style.display = 'none';
				}
			};

			reader.readAsDataURL(file);
		}
	}



	document.addEventListener("DOMContentLoaded", function () {
		// Define Standard User Elements
		var leaveDurationDropdown = document.getElementById("leaveDurationDropdown");
		var fullDayContainer = document.getElementById("fullDayContainer");
		var halfDayContainer = document.getElementById("halfDayContainer");
		var leaveTypeDropdown = document.getElementById("leaveTypeDropdown");
		var maternityAdoptionMiscarrageContainer = document.getElementById("MaternityAdoptionMiscarrageContainer");
		var leaveDurationContainer = document.getElementById("leaveDurationContainer");
		var todatetime = document.getElementById("todatetime");
		var fromdatetime = document.getElementById("fromdatetime");
		var ChildDOBDateContainer = document.getElementById("ChildDOBDateContainer");
		var expectedDeliveryDateContainer = document.getElementById("expectedDeliveryDateContainer");
		// Placeholder values
		var fullDayValue = "1";
		var halfDayValue = "2";

		function toggleContainers() {
			var selectedLeaveType = leaveTypeDropdown.options[leaveTypeDropdown.selectedIndex].text;
			if (['Maternity Leave', 'Adoption', 'Miscarriage' ].includes(selectedLeaveType)) {
				fullDayContainer.style.display = "flex";
				halfDayContainer.style.display = "none";
				leaveDurationContainer.style.display = "none";
				ChildDOBDateContainer.style.display = "none";
				todatetime.style.display = "block";
				$('#leaveDurationDropdown').attr('required', false);
			}

			else if (selectedLeaveType === 'Paternity Leave') {
				fullDayContainer.style.display = "flex";
				halfDayContainer.style.display = "none";
				ChildDOBDateContainer.style.display = "block";
			}
			else if (selectedLeaveType === 'Medical Leave') {
				leaveDurationContainer.style.display = "none";
				ChildDOBDateContainer.style.display = "none";
				halfDayContainer.style.display = "none";
				leaveDurationDropdown.selectedIndex = 0;
				fullDayContainer.style.display = "flex";
				$('#leaveDurationDropdown').attr('required', false);
			}

			else if (selectedLeaveType === 'Privilege Leave' ||selectedLeaveType === 'Leave Without Pay'||selectedLeaveType === 'Compensatory Off') {
				if(selectedLeaveType === 'Leave Without Pay')
				{
					  todatetime.style.display = fullDayValue ==="block"  ;
					fromdatetime.style.display = fullDayValue ==="block"  ;
					halfDayContainer.style.display = "none";
					ChildDOBDateContainer.style.display = "none";
					leaveDurationContainer.style.display = "none";

					return;
				}

				if (leaveDurationDropdown.value === fullDayValue) {

					fullDayContainer.style.display = "flex";
					todatetime.style.display = fullDayValue === "1" ? "block" : "none";
					fromdatetime.style.display = fullDayValue === "1" ? "block" : "block";
					halfDayContainer.style.display = "none";
					ChildDOBDateContainer.style.display = "none";
					return;
				}
				else if (leaveDurationDropdown.value === halfDayValue) {
					fullDayContainer.style.display = "flex";
					halfDayContainer.style.display = "none";
					ChildDOBDateContainer.style.display = "none";
					todatetime.style.display = "none";
					fromdatetime.style.display = "block";
					return;
				}
				leaveDurationDropdown.style.display = "block";
				fullDayContainer.style.display = "none";
				leaveDurationContainer.style.display = "block";
				leaveDurationDropdown.style.display = "flex";
				ChildDOBDateContainer.style.display = "none";
				leaveDurationDropdown.selectedIndex = 0;
				$('#leaveDurationDropdown').attr('required', true);
			}
			else {
				fullDayContainer.style.display = "none";
				halfDayContainer.style.display = "none";
				ChildDOBDateContainer.style.display = "none";
				leaveDurationContainer.style.display = "none";
				leaveDurationDropdown.selectedIndex = 0;
			}
		}

		function toggleMaternityAdoptionMiscarrageContainer() {
			var selectedLeaveType = leaveTypeDropdown.options[leaveTypeDropdown.selectedIndex].text;
			maternityAdoptionMiscarrageContainer.style.display =
				['Maternity Leave', 'Adoption', 'Miscarriage', 'Medical Leave', 'Paternity Leave' ].includes(selectedLeaveType) ? "flex" : "none";
		}

		function toggleExpectedDeliveryDate() {
			var selectedLeaveType = leaveTypeDropdown.options[leaveTypeDropdown.selectedIndex].text;
			expectedDeliveryDateContainer.style.display = selectedLeaveType === 'Maternity Leave' ? "block" : "none";
		}



		function toggleLeaveDurationVisibility() {
			var selectedLeaveType = leaveTypeDropdown.options[leaveTypeDropdown.selectedIndex].text;
			if (['Compensatory Offq'].includes(selectedLeaveType)) {
				leaveDurationContainer.style.display = "block";
				 fullDayContainer.style.display = "none";
				$('#leaveDurationDropdown').attr('required', true);
			}

			else {
				$('#leaveDurationDropdown').attr('required', false);
			}
		}

		// Event listeners for standard user functionality
		leaveDurationDropdown.addEventListener("change", toggleContainers);
		leaveTypeDropdown.addEventListener("change", function () {
			   const selectedLeaveTypeId = parseInt(this.value);
			   if(selectedLeaveTypeId == @Convert.ToInt32(LeaveType.LeaveWithOutPay))
			   {

				   $("#leaveDurationContainer").css("display","none");
				   $("#MaternityAdoptionMiscarrageContainer").css("display","none");
				   $("#todatetime").css("display","block");
				   $("#fullDayContainer").css("display","flex");
			   }
			   else if(selectedLeaveTypeId == @Convert.ToInt32(LeaveType.CompOff)){
					  $("#fullDayContainer").css("display","none");
							 $("#todatetime").css("display","none");
					   $("#leaveDurationContainer").css("display","block");
			toggleExpectedDeliveryDate();
			toggleLeaveDurationVisibility();
			toggleContainers();
			   }

			   else{
					  $("#fullDayContainer").css("display","none");
							 $("#todatetime").css("display","none");
					   $("#leaveDurationContainer").css("display","block");
			  toggleMaternityAdoptionMiscarrageContainer();
			toggleExpectedDeliveryDate();
			toggleLeaveDurationVisibility();
			toggleContainers();
			   }

		});

		// Initial calls
		toggleContainers();
		toggleMaternityAdoptionMiscarrageContainer();
		toggleLeaveDurationVisibility();
		toggleExpectedDeliveryDate();
	});
</script>



