@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Configuration
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject IConfiguration _configuration
@{
	Layout = String.Format("~/Areas/{0}/Views/Shared/_Layout.cshtml", @HttpContextAccessor.HttpContext.Session.GetString(HRMS.Models.Common.Constants.AreaName));

}
<style>
	.crm-loader-overlay {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(255, 255, 255, 0.6);
		z-index: 1050; /* Above modals and Bootstrap elements */
		display: flex;
		justify-content: center;
		align-items: center;
	}

	.crm-loader-inner {
		text-align: center;
	}

	.loader-text {
		font-size: 16px;
		color: #333;
	}
</style>

<style>
	body {
		background-color: #f8f9fa;
		font-family: Arial, sans-serif;
	}

	.HD {
		background: #04336f;
		cursor: pointer;
		/* border-radius: 27px; */
	}

	.status-badge {
		display: inline-block;
		padding: 3px 8px;
		border-radius: 12px;
		font-weight: 600;
		color: white;
		font-size: 0.9rem;
		min-width: 22px;
		text-align: center;
	}

	.P {
		background-color: #28a745;
		cursor: pointer;
	}

	.A {
		background-color: #dc3545;
		cursor: pointer;
	}

	.H {
		background-color: #1c5db1;
		cursor: pointer;
	}

	.table-warning {
		background-color: #fff3cd;
		color: #856404;
		font-weight: 700;
		cursor: pointer;
	}

	#pagination {
		justify-content: center;
	}

	#total-records-info {
		font-weight: 500;
	}

	.table-warning {
		background-color: #fff3cd !important;
		color: #856404 !important;
	}

	div#record-range-info {
		float: left;
	}

	div#pagination-container {
		float: right;
	}

	.filter-class {
		background-color: #ffffff;
		border-radius: 8px;
		padding: 12px 20px;
		box-shadow: 0 0 8px rgba(0,0,0,0.1);
		margin: 0 auto; /* center horizontally */
		float: right;
	}

	.filter-label {
		font-weight: 600;
		color: #444;
		font-size: 14px;
		white-space: nowrap;
	}

	.form-select {
		border: 1.5px solid #ced4da;
		border-radius: 6px;
		font-size: 14px;
		padding: 5px 10px;
		transition: border-color 0.3s ease;
	}

		.form-select:focus {
			border-color: #0d6efd;
			box-shadow: 0 0 4px rgba(13, 110, 253, 0.5);
			outline: none;
		}

	button#export-btn {
		background: #05397b;
		color: white;
		padding: 6px;
		margin-left: 14px;
	}

	.Show-filter-class {
		background-color: #ffffff;
		border-radius: 8px;
		padding: 12px 20px;
		box-shadow: 0 0 8px rgba(0,0,0,0.1);
		margin: 0 auto; /* center horizontally */
		float: left;
		margin-top: 23px;
	}
</style>
<div id="crm-loader" class="crm-loader-overlay d-none">
	<div class="crm-loader-inner">
		<div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
			<span class="visually-hidden">Loading...</span>
		</div>
		<div class="loader-text mt-2">Loading, please wait...</div>
	</div>
</div>

<div class=" ">
	<div class="main-header anim" style="--delay: 0s">Team Attendance Report</div>
	<!-- Filters Row -->
	<div class="d-flex flex-wrap align-items-end gap-3 mb-4 mt-4 p-3 rounded shadow-sm bg-white">
		<div class="d-flex align-items-center">
			<label for="page-size-select" class="me-2 mb-0">Show:</label>
			<select id="page-size-select" class="form-select" style="width: 100px;">
				<option value="10">10</option>
				<option value="20" selected>20</option>
				<option value="50">50</option>
				<option value="100">100</option>
			</select>
		</div>
		<div class="d-flex align-items-center" style="min-width: 300px; ">
			<label for="search-box" class="me-4 mb-0"> Location:</label>
			<div class="position-relative w-100">
				<select id="jobLocationDropdown" class="form-control">
					<option value="">-- Select Job Location &nbsp &nbsp</option>
				</select>
				<i class="fa fa-chevron-down position-absolute"
				   style="font-size: 10px;color: gray; right: 10px; top: 50%; transform: translateY(-50%); pointer-events: none;"></i>
			</div>
		</div>
		<!-- Search Input -->
		<div class="d-flex align-items-center" style="min-width: 300px;">
			<label for="search-box" class="me-2 mb-0">Search:</label>
			<input type="text" id="search-box" class="form-control" placeholder="Search by name or employee no..." style="max-width: 300px;">
		</div>

		<!-- Year Selector -->
		<div class="d-flex align-items-center">
			<label for="year-select" class="me-2 mb-0">Year:</label>
			<select id="year-select" class="form-select" style="width: 120px;">
				<!-- Dynamically populated -->
			</select>
		</div>

		<!-- Month Selector -->
		<div class="d-flex align-items-center">
			<label for="month-select" class="me-2 mb-0">Month:</label>
			<select id="month-select" class="form-select" style="width: 120px;">
				<option value="1">January</option>
				<option value="2">February</option>
				<option value="3">March</option>
				<option value="4">April</option>
				<option value="5">May</option>
				<option value="6">June</option>
				<option value="7">July</option>
				<option value="8">August</option>
				<option value="9">September</option>
				<option value="10">October</option>
				<option value="11">November</option>
				<option value="12">December</option>
			</select>
		</div>

		<!-- Page Size -->


		<!-- Job Location Dropdown -->
		

		<!-- Export Button -->
		<div>
			<button id="export-btn" class="btn btn-primary" style="height: 38px;">Export Attendance</button>
		</div>

	</div>


	<div class="table-container">

		<table class="table table-bordered table-hover">


			<thead class="table-dark">
				<tr id="header-row">
					<th>Employee ID</th>
					<th>Employee Number</th>
					<th>Employee Name</th>
					<th>Job Location </th>
				</tr>
			</thead>
			<tbody id="attendance-data">
			</tbody>
		</table>
	</div>
</div>
<div id="total-records-info" class="text-center text-muted"></div>

<div class="Footerbar">
	<div id="record-range-info" class="text-center text-muted mb-2"></div>

	<div id="pagination-container" class="d-flex justify-content-center mb-2"></div>
</div>

<!-- Attendance Detail Modal -->
<div class="modal fade" id="attendanceDetailModal" tabindex="-1" aria-labelledby="attendanceDetailModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="attendanceDetailModalLabel">Attendance Details</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body" id="attendanceDetailBody">
				Loading details...
			</div>
		</div>
	</div>
</div>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

<script>
	let currentPage = 1;
	let pageSize = 20;
	let totalPages = 1;
	let isLoading = false;

	function showLoading() {
	  $("#crm-loader").removeClass("d-none");
	}

	function hideLoading() {
	  $("#crm-loader").addClass("d-none");
	}

	function populateYearDropdown(startYear = 2024) {
	  const currentYear = new Date().getFullYear();
	  const $yearSelect = $("#year-select").empty();
	  for (let year = currentYear; year >= startYear; year--) {
		$yearSelect.append(`<option value="${year}" ${year === currentYear ? "selected" : ""}>${year}</option>`);
	  }
	}

	function selectCurrentMonth() {
	  $("#month-select").val(new Date().getMonth() + 1);
	}

	function getSelectedYear() {
	  return parseInt($("#year-select").val());
	}

	function getSelectedMonth() {
	  return parseInt($("#month-select").val());
	}

	function renderAttendanceTable(response) {
	  const data = response?.data?.attendances;
	  if (!data?.length) return;

	  const tbody = $("#attendance-data").empty();
	  const thead = $("#header-row").empty();
	  const firstRecord = data[0];
	  const dayKeys = Object.keys(firstRecord.attendanceByDay);

	  let headerHtml = `<th>Employee Number</th><th>Employee Name</th><th>Job Location</th>`;
	  dayKeys.forEach(day => headerHtml += `<th>${day.replace("_", " ")}</th>`);
	  headerHtml += `<th>Total Working Days</th><th>Present Days</th><th>Total Leaves</th>`;
	  thead.html(headerHtml);

	  data.forEach(record => {
		let row = `<tr><td>${record.employeNumber}</td><td>${record.employeeName}</td><td>${record.jobLocationName}</td>`;
		dayKeys.forEach(day => {
		  let status = record.attendanceByDay[day];
		  if (status === "Sa" || status === "S") status = "H";
		  const className = status === "P" ? "P" : status === "A" ? "A" : status === "H" ? "H" : status === "HD" ? "HD" : status === "L" ? "table-warning text-dark" : "";
		  row += `<td class="${className}" data-date="${day.replace("_", "-" )}" data-empid="${record.encryptedIdentity}" data-empno="${record.employeeNumberWithoutAbbr}"><span class="${className} status-badge">${status}</span></td>`;
		});
		row += `<td>${record.totalWorkingDays ?? '-'}</td><td>${record.presentDays ?? '-'}</td><td>${record.totalLeaves ?? '-'}</td></tr>`;
		tbody.append(row);
	  });
	}

	function renderPagination(current, total) {
	  const $pagination = $("#pagination-container").empty();
	  const maxPages = 3;
	  let start = Math.max(1, current - Math.floor(maxPages / 2));
	  let end = Math.min(total, start + maxPages - 1);
	  if (end - start < maxPages - 1) start = Math.max(1, end - maxPages + 1);

	  let html = '<nav><ul class="pagination justify-content-center">';
	  html += `<li class="page-item ${current === 1 ? "disabled" : ""}"><a class="page-link" href="#" data-page="${current - 1}">Previous</a></li>`;
	  for (let i = start; i <= end; i++) {
		html += `<li class="page-item ${i === current ? "active" : ""}"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
	  }
	  html += `<li class="page-item ${current === total ? "disabled" : ""}"><a class="page-link" href="#" data-page="${current + 1}">Next</a></li></ul></nav>`;
	  $pagination.html(html);
	}

	function fetchAttendanceData(year, month, page, search = "", overridePageSize = null, jobLocationId = 0) {
	  if (isLoading) return;
	  isLoading = true;
	  showLoading();
	  const effectivePageSize = overridePageSize ?? pageSize;

	  $.ajax({
		url: '/employee/MyInfo/TeamAttendenceCalendarList',
		type: 'GET',
		data: { Year: year, Month: month, Page: page, PageSize: effectivePageSize, SearchTerm: search, JobLocationID: jobLocationId },
		dataType: 'json',
		success: function (res) {
		  const jobList = res.data.joblocationList;
		  const $ddl = $('#jobLocationDropdown');
		  const selectedId = $ddl.val();
		  $ddl.empty().append('<option value="">-- Select Job Location --</option>');
		  $.each(jobList, (i, loc) => $ddl.append(`<option value="${loc.jobLocationID}">${loc.jobLocationName}</option>`));
		  $ddl.val(selectedId);

		  const total = res.data.totalRecords || 0;
		  if (!total) {
			$("#attendance-data").html(`<tr><td colspan="100%" class="text-center text-muted">No records found</td></tr>`);
			$("#pagination").empty();
			$("#record-range-info").text("No records to display.");
			isLoading = false;
			hideLoading();
			return;
		  }

		  totalPages = Math.ceil(total / pageSize);
		  renderAttendanceTable(res);
		  renderPagination(page, totalPages);

		  const start = (page - 1) * pageSize + 1;
		  const end = Math.min(page * pageSize, total);
		  $("#record-range-info").text(`Showing ${start} to ${end} of ${total.toLocaleString()} entries`);
		  hideLoading();
		  isLoading = false;
		},
		error: function (xhr, status, error) {
		  console.error("Error fetching attendance data:", error);
		  hideLoading();
		  isLoading = false;
		}
	  });
	}

	function formatDate(dateStr) {
	  return new Date(dateStr).toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' });
	}

	function formatDateTime(dateStr) {
	  return new Date(dateStr).toLocaleString(undefined, { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' });
	}

	function formatTimeOnly(dateStr) {
	  return new Date(dateStr).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
	}

	function formatSqlTimeToHoursMinutes(timeStr) {
	  if (!timeStr || typeof timeStr !== 'string') return '-';
	  const parts = timeStr.split(':');
	  if (parts.length < 2) return '-';
	  const hours = parseInt(parts[0], 10);
	  const minutes = parseInt(parts[1], 10);
	  return `${hours ? `${hours}h` : ''} ${minutes ? `${minutes}m` : ''}`.trim() || '0m';
	}

	$(document).ready(function () {
	  populateYearDropdown();
	  selectCurrentMonth();
	  fetchAttendanceData(getSelectedYear(), getSelectedMonth(), currentPage);

	  $("#year-select, #month-select").on("change", () => {
		currentPage = 1;
		fetchAttendanceData(getSelectedYear(), getSelectedMonth(), currentPage, '', null, parseInt($("#jobLocationDropdown").val()) || 0);
	  });

	  $('#jobLocationDropdown').on('change', function () {
		currentPage = 1;
		fetchAttendanceData(getSelectedYear(), getSelectedMonth(), currentPage, '', null, parseInt($(this).val()) || 0);
	  });

		 let searchTimer;

	$("#search-box").on("keyup", function () {
		clearTimeout(searchTimer); // Purana timer clear karo

		const text = $(this).val().trim();
		currentPage = 1;
		const override = text === "" ? null : 0;

		// Minimum character limit (optional but useful)
		if (text.length === 0 || text.length >= 2) {
			searchTimer = setTimeout(function () {
				fetchAttendanceData(
					getSelectedYear(),
					getSelectedMonth(),
					currentPage,
					text,
					override,
					parseInt($("#jobLocationDropdown").val()) || 0
				);
			}, 300); // debounce delay: 300ms
		}
	});


	  $("#page-size-select").on("change", function () {
		pageSize = parseInt($(this).val());
		currentPage = 1;
		fetchAttendanceData(getSelectedYear(), getSelectedMonth(), currentPage, '', null, parseInt($("#jobLocationDropdown").val()) || 0);
	  });

	  $("#pagination-container").on("click", "a.page-link", function (e) {
		e.preventDefault();
		const page = $(this).data("page");
		if (page && page !== currentPage && page >= 1 && page <= totalPages) {
		  currentPage = page;
		  fetchAttendanceData(getSelectedYear(), getSelectedMonth(), currentPage, '', null, parseInt($("#jobLocationDropdown").val()) || 0);
		}
	  });

	  $(document).on("click", "#attendance-data td", function () {
		const $td = $(this);
		const rawDateKey = $td.data("date");
		if (!rawDateKey) return;
		const fullDate = `${getSelectedYear()}-${String(getSelectedMonth()).padStart(2, '0')}-${String(rawDateKey.substr(0, 2)).padStart(2, '0')}`;
		const empId = $td.data("empid"), empNo = $td.data("empno");
		if (!empId || !empNo) return;

		$("#attendanceDetailModal").modal("show");
		$("#attendanceDetailBody").html("Loading...");

		$.get('/employee/MyInfo/GetAttendanceDetails', { date: fullDate, employeeId: empId, employeeNo: empNo }, function (data) {
		  let html = "";
		  switch (data.recordType) {
			case "Attendance":
			  const first = new Date(data.firstLogDate), last = new Date(data.lastLogDate);
			  const sameDay = first.toDateString() === last.toDateString();
			  html = `<div class="card shadow-sm border-0"><div class="card-body"><h5 class="card-title mb-3 text-primary">👤 Attendance Record</h5><div class="row mb-2"><div class="col-md-6"><strong>Date:</strong> ${formatDate(data.workDate)}</div><div class="col-md-6"><strong>Status:</strong> <span class="badge bg-success">${data.attendanceStatus ?? '-'}</span></div></div><div class="row mb-2"><div class="col-md-6"><strong>Check-in:</strong> ${sameDay ? formatTimeOnly(data.firstLogDate) : formatDateTime(data.firstLogDate)}</div><div class="col-md-6"><strong>Check-out:</strong> ${sameDay ? formatTimeOnly(data.lastLogDate) : formatDateTime(data.lastLogDate)}</div></div><div class="row"><div class="col-md-6"><strong>Hours Worked:</strong> ${formatSqlTimeToHoursMinutes(data.hoursWorked)}</div></div></div></div>`;
			  break;
			case "Holiday":
			  html = `<div class="card shadow-sm border-0"><div class="card-body"><h5 class="card-title mb-3 text-success">🎉 Holiday</h5><div class="mb-2"><strong>Name:</strong> ${data.holidayName}</div><div class="mb-2"><strong>Description:</strong> ${data.description ?? '-'}</div><div><strong>From:</strong> ${formatDate(data.fromDate)} <strong>To:</strong> ${formatDate(data.toDate)}</div></div></div>`;
			  break;
			case "Leave":
			  html = `<div class="card shadow-sm border-0"><div class="card-body"><h5 class="card-title mb-3 text-warning">📅 Leave Details</h5><div class="mb-2"><strong>Reason:</strong> ${data.reason}</div><div class="mb-2"><strong>Start Date:</strong> ${formatDateTime(data.startDate)}</div><div class="mb-2"><strong>End Date:</strong> ${formatDateTime(data.endDate)}</div><div><strong>Status:</strong> <span class="LeaveApproved">#${data.leaveStatusID}</span></div></div></div>`;
			  break;
			default:
			  html = `<div class="alert alert-warning text-center"><i class="bi bi-info-circle-fill"></i> No attendance record found for this day.</div>`;
		  }
		  $("#attendanceDetailBody").html(html);
		});
	  });

	  $("#export-btn").on("click", function () {
		const $btn = $(this);
		const url = `/employee/MyInfo/ExportAttendance?Year=${getSelectedYear()}&Month=${getSelectedMonth()}&jobLocationId=${parseInt($("#jobLocationDropdown").val()) || 0}`;
		$btn.prop("disabled", true).text("Please wait...");
		const $iframe = $("<iframe>").hide().attr("src", url).appendTo("body");
		setTimeout(() => { $btn.prop("disabled", false).text("Export Attendance"); $iframe.remove(); }, 6000);
	  });
	});
</script>

