@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Configuration
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject IConfiguration _configuration
@{
	Layout = String.Format("~/Areas/{0}/Views/Shared/_Layout.cshtml", @HttpContextAccessor.HttpContext.Session.GetString(HRMS.Models.Common.Constants.AreaName));

}
<style>
	body {
		background-color: #f8f9fa;
		font-family: Arial, sans-serif;
	}

	.status-badge {
		display: inline-block;
		padding: 2px 8px;
		border-radius: 12px;
		font-weight: 600;
		color: white;
		font-size: 0.9rem;
		min-width: 22px;
		text-align: center;
	}

	.P {
		background-color: #28a745;
		cursor: pointer;
	}

	.A {
		background-color: #dc3545;
		cursor: pointer;
	}

	.H {
		background-color: black;
		cursor: pointer;
	}

	.table-warning {
		background-color: #fff3cd;
		color: #856404;
		font-weight: 700;
		cursor: pointer;
	}

	#pagination {
		justify-content: center;
	}

	#total-records-info {
		font-weight: 500;
	}

	.table-warning {
		background-color: #fff3cd !important;
		color: #856404 !important;
	}

	div#record-range-info {
		float: left;
	}

	div#pagination-container {
		float: right;
	}

	.filter-class {
		background-color: #ffffff;
		border-radius: 8px;
		padding: 12px 20px;
		box-shadow: 0 0 8px rgba(0,0,0,0.1);
		margin: 0 auto; /* center horizontally */
		float: right;
	}

	.filter-label {
		font-weight: 600;
		color: #444;
		font-size: 14px;
		white-space: nowrap;
	}

	.form-select {
		border: 1.5px solid #ced4da;
		border-radius: 6px;
		font-size: 14px;
		padding: 5px 10px;
		transition: border-color 0.3s ease;
	}

		.form-select:focus {
			border-color: #0d6efd;
			box-shadow: 0 0 4px rgba(13, 110, 253, 0.5);
			outline: none;
		}

	button#export-btn {
		background: #05397b;
		color: white;
		padding: 6px;
		margin-left: 14px;
	}

	.Show-filter-class {
		background-color: #ffffff;
		border-radius: 8px;
		padding: 12px 20px;
		box-shadow: 0 0 8px rgba(0,0,0,0.1);
		margin: 0 auto; /* center horizontally */
		float: left;
		margin-top: 23px;
	}
</style>


<div class=" ">
	<div class="main-header anim" style="--delay: 0s">Team Attendance Report</div>
	<!-- Filters Row -->
	<div class="d-flex flex-wrap align-items-end gap-3 mb-4 mt-4 filter-class">

		<!-- Search Input -->
		<div class="d-flex align-items-center" style="min-width: 300px;">
			<label for="search-box" class="me-2 filter-label mb-0">Search:</label>
			<input type="text" id="search-box" class="form-control" placeholder="Search by name or employee no..." style="max-width: 300px;">
		</div>

		<!-- Year Selector -->
		<div class="d-flex align-items-center">
			<label for="year-select" class="me-2 filter-label mb-0">Year:</label>
			<select id="year-select" class="form-select" style="width: 120px;">
				<!-- Populated dynamically -->
			</select>
		</div>

		<!-- Month Selector -->
		<div class="d-flex align-items-center">
			<label for="month-select" class="me-2 filter-label mb-0">Month:</label>
			<select id="month-select" class="form-select" style="width: 120px;">
				<option value="1">January</option>
				<option value="2">February</option>
				<option value="3">March</option>
				<option value="4">April</option>
				<option value="5">May</option>
				<option value="6">June</option>
				<option value="7">July</option>
				<option value="8">August</option>
				<option value="9">September</option>
				<option value="10">October</option>
				<option value="11">November</option>
				<option value="12">December</option>
			</select>
		</div>

		<!-- Export Button -->
		<div>
			<button id="export-btn" class="btn btn-primary" style="height: 38px;">Export Attendance</button>
		</div>

	</div>

	<!-- Show Records Per Page -->
	<div class="d-flex align-items-center  Show-filter-class" style="gap: 12px;">
		<label for="page-size-select" class="filter-label mb-0">Show:</label>
		<select id="page-size-select" class="form-select" style="width: 100px;">
			<option value="10">10</option>
			<option value="20" selected>20</option>
			<option value="50">50</option>
			<option value="100">100</option>
		</select>
	</div>



	<div class="table-container">

		<table class="table table-bordered table-hover">


			<thead class="table-dark">
				<tr id="header-row">
					<th>Employee ID</th>
					<th>Employee Number</th>
					<th>Employee Name</th>
				</tr>
			</thead>
			<tbody id="attendance-data">
			</tbody>
		</table>
	</div>
</div>
<div id="total-records-info" class="text-center text-muted"></div>

<div class="Footerbar">
	<div id="record-range-info" class="text-center text-muted mb-2"></div>

	<div id="pagination-container" class="d-flex justify-content-center mb-2"></div>
</div>

<!-- Attendance Detail Modal -->
<div class="modal fade" id="attendanceDetailModal" tabindex="-1" aria-labelledby="attendanceDetailModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="attendanceDetailModalLabel">Attendance Details</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body" id="attendanceDetailBody">
				Loading details...
			</div>
		</div>
	</div>
</div>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

<script>
			function populateYearDropdown(startYear = 2024) {
		const currentYear = new Date().getFullYear();
		const $yearSelect = $("#year-select");

		$yearSelect.empty(); // Clear any existing options

		for (let year = currentYear; year >= startYear; year--) {
			const selected = year === currentYear ? 'selected' : '';
			$yearSelect.append(`<option value="${year}" ${selected}>${year}</option>`);
		}
	}

	function selectCurrentMonth() {
		const currentMonth = new Date().getMonth() + 1; // Month is 0-indexed
		$("#month-select").val(currentMonth);
	}
	$(document).ready(function () {
		populateYearDropdown();  // Populate years
	selectCurrentMonth();
		let currentPage = 1;
		let pageSize = 20;
		let totalPages = 1;
		let isLoading = false;

		function showLoading() {
			$("#attendance-data").html(`<tr><td colspan="50" class="text-center">Loading...</td></tr>`);
		}

		function fetchAttendanceData(year, month, page) {
			if (isLoading) return;
			isLoading = true;
			showLoading();

			$.ajax({
				url: '/employee/MyInfo/TeamAttendenceCalendarList',
				type: 'GET',
				data: { Year: year, Month: month, Page: page, PageSize: pageSize },
				dataType: 'json',
				success: function (response) {
					console.log(response);
					var totalRecords = response.data.totalRecords || 0;

					totalPages = Math.ceil(totalRecords / pageSize);
					renderAttendanceTable(response);
					renderPagination(page, totalPages);
		const startRecord = (page - 1) * pageSize + 1;
		const endRecord = Math.min(page * pageSize, totalRecords);
		$("#record-range-info").text(`Showing ${startRecord} to ${endRecord} of ${totalRecords.toLocaleString()} entries`);

					isLoading = false;
				},
				error: function (xhr, status, error) {
					console.error("Error fetching attendance data:", error);
					isLoading = false;
				}
			});
		}

				function renderAttendanceTable(response) {
		if (!response?.data?.attendances || response.data.attendances.length === 0) return;

		const attendanceData = response.data.attendances;
		const tbody = $("#attendance-data");
		const thead = $("#header-row");

		tbody.empty();
		thead.empty();
		// Static headers
		let headerHtml = `
						  <th>Employee Number</th>
						  <th>Employee Name</th>`;

		// Use the first record to get all dynamic day headers
		const firstRecord = attendanceData[0];
		const dayKeys = Object.keys(firstRecord.attendanceByDay);

		dayKeys.forEach(day => {
			headerHtml += `<th>${day.replace("_", " ")}</th>`;
		});
		// Optionally add summary columns
		headerHtml += `<th>Total Working Days</th><th>Present Days</th>`;
		thead.html(headerHtml);
		// Now build body rows
		attendanceData.forEach(record => {
			let row = `<tr>
				<td>${record.employeNumber}</td>
				<td>${record.employeeName}</td>`;
					 dayKeys.forEach(day => {
		let status = record.attendanceByDay[day];

	if (status === "Sa" || status === "S") {
		status = "H";  // assign 'H' to status if it's Sa or S
	}

	const className = status === "P" ? "P"
		: status === "A" ? "A"
		: status === "H" ? "H"
		: status === "L" ? "table-warning text-dark"
		: "";



		const dateStr = day.replace("_", "-");
		row += `<td class="${className}" data-date="${dateStr}" data-empid="${record.encryptedIdentity}" data-empno="${record.employeeNumberWithoutAbbr}">
					<span class="${className} status-badge">${status}</span>
				</td>`;
	});


			row += `<td>${record.totalWorkingDays ?? '-'}</td>
					<td>${record.presentDays ?? '-'}</td></tr>`;

			tbody.append(row);
		});
	}
			function renderPagination(current, total) {
		const $paginationContainer = $("#pagination-container");
		$paginationContainer.empty();

		const maxVisiblePages = 3;
		let startPage = Math.max(1, current - Math.floor(maxVisiblePages / 2));
		let endPage = startPage + maxVisiblePages - 1;

		if (endPage > total) {
			endPage = total;
			startPage = Math.max(1, endPage - maxVisiblePages + 1);
		}

		let html = '<nav aria-label="Page navigation example"><ul class="pagination justify-content-center">';

		html += `
			<li class="page-item ${current === 1 ? "disabled" : ""}">
				<a class="page-link" href="#" aria-label="Previous" data-page="${current - 1}">Previous</a>
			</li>
		`;

		for (let i = startPage; i <= endPage; i++) {
			html += `
				<li class="page-item ${i === current ? "active" : ""}">
					<a class="page-link" href="#" data-page="${i}" >${i}</a>
				</li>
			`;
		}

		html += `
			<li class="page-item ${current === total ? "disabled" : ""}">
				<a class="page-link" href="#" aria-label="Next" data-page="${current + 1}">Next</a>
			</li>
		`;

		html += '</ul></nav>';

		$paginationContainer.html(html);

		// $("#total-records-info").html(`<span class="text-muted">Total Records: ${total}</span>`);
	}
		$("#page-size-select").on("change", function () {
		pageSize = parseInt($(this).val());
		currentPage = 1;
		fetchAttendanceData(getSelectedYear(), getSelectedMonth(), currentPage);
	});
	// click handler
	$("#pagination-container").off("click").on("click", "a.page-link", function (e) {
		e.preventDefault();
		const page = $(this).data("page");
		if (page && page !== currentPage && page >= 1 && page <= totalPages) {
			currentPage = page;
			const year = parseInt($("#year-select").val()) || new Date().getFullYear();
			const month = parseInt($("#month-select").val()) || (new Date().getMonth() + 1);
			fetchAttendanceData(year, month, currentPage);
		}
	});
		function getSelectedYear() {
		return parseInt($("#year-select").val());
	}

	function getSelectedMonth() {
		return parseInt($("#month-select").val());
	}
	$("#year-select, #month-select").on("change", function () {
		currentPage = 1;
		fetchAttendanceData(getSelectedYear(), getSelectedMonth(), currentPage);
	});
		// Initial page load
		fetchAttendanceData(new Date().getFullYear(), new Date().getMonth() + 1, currentPage);
	});

	//Attendance Popup
	 $(document).on("click", "#attendance-data td", function () {
		const $td = $(this);

		const rawDateKey = $td.data("date");
		if (!rawDateKey) return;

		const dayPart = rawDateKey.substr(0, 2);
		const paddedDay = dayPart.padStart(2, '0');

		const year = parseInt($("#year-select").val());
		const month = parseInt($("#month-select").val());
		const paddedMonth = String(month).padStart(2, '0');
		const fullDate = `${year}-${paddedMonth}-${paddedDay}`;
		const employeeId = $td.data("empid");
		const employeeNo = $td.data("empno");
		if (!employeeId || !employeeNo) return;
		$("#attendanceDetailModal").modal("show");
		$("#attendanceDetailBody").html("Loading...");

		$.ajax({
			url: '/employee/MyInfo/GetAttendanceDetails',
			type: 'GET',
			data: {
				date: fullDate,
				employeeId: employeeId,
				employeeNo: employeeNo
			},
				success: function (data) {
		let html = "";

		switch (data.recordType) {
			case "Attendance":
				html = `
					<div class="card shadow-sm border-0">
						<div class="card-body">
							<h5 class="card-title mb-3 text-primary">👤 Attendance Record</h5>
							<div class="row mb-2">
								<div class="col-md-6"><strong>Date:</strong> ${formatDate(data.workDate)}</div>
								<div class="col-md-6"><strong>Status:</strong> <span class="badge bg-success">${data.attendanceStatus ?? '-'}</span></div>
							</div>
							<div class="row mb-2">
								<div class="col-md-6"><strong>Check-in:</strong> ${formatDateTime(data.firstLogDate)}</div>
								<div class="col-md-6"><strong>Check-out:</strong> ${formatDateTime(data.lastLogDate)}</div>
							</div>
							<div class="row">
								<div class="col-md-6"><strong>Hours Worked:</strong> ${formatSqlTimeToHoursMinutes(data.hoursWorked)}</div>
							</div>
						</div>
					</div>`;
				break;

			case "Holiday":
				html = `
					<div class="card shadow-sm border-0">
						<div class="card-body">
							<h5 class="card-title mb-3 text-success">🎉 Holiday</h5>
							<div class="mb-2"><strong>Name:</strong> ${data.holidayName}</div>
							<div class="mb-2"><strong>Description:</strong> ${data.description ?? '-'}</div>
							<div><strong>From:</strong> ${formatDate(data.fromDate)} <strong>To:</strong> ${formatDate(data.toDate)}</div>
						</div>
					</div>`;
				break;

			case "Leave":
				html = `
					<div class="card shadow-sm border-0">
						<div class="card-body">
							<h5 class="card-title mb-3 text-warning">📅 Leave Details</h5>
							<div class="mb-2"><strong>Reason:</strong> ${data.reason}</div>
							<div class="mb-2"><strong>Start Date:</strong> ${formatDateTime(data.startDate)}</div>
							<div class="mb-2"><strong>End Date:</strong> ${formatDateTime(data.endDate)}</div>
							<div><strong>Status:</strong> <span class="badge bg-primary">#${data.leaveStatusID}</span></div>
						</div>
					</div>`;
				break;

			case "No Record Found":
			default:
				html = `<div class="alert alert-warning text-center">
							<i class="bi bi-info-circle-fill"></i> No attendance  record found for this day.
						</div>`;
				break;
		}

		$("#attendanceDetailBody").html(html);
	}
		});
	});
		function formatDate(dateStr) {
		if (!dateStr) return "-";
		const date = new Date(dateStr);
		const day = String(date.getDate()).padStart(2, '0');
		const month = date.toLocaleString('default', { month: 'short' });
		const year = date.getFullYear();
		return `${day}-${month}-${year}`;
	}

	function formatDateTime(dateStr) {
		if (!dateStr) return "-";
		const date = new Date(dateStr);

		const day = String(date.getDate()).padStart(2, '0');
		const month = date.toLocaleString('default', { month: 'short' });
		const year = date.getFullYear();

		let hours = date.getHours();
		const minutes = String(date.getMinutes()).padStart(2, '0');
		const ampm = hours >= 12 ? 'PM' : 'AM';

		hours = hours % 12;
		hours = hours ? hours : 12; // Convert 0 to 12
		const strTime = `${String(hours).padStart(2, '0')}:${minutes} ${ampm}`;

		return `${day}-${month}-${year} ${strTime}`;
	}


	$("#export-btn").on("click", function () {
		const year = $("#year-select").val();
		const month = $("#month-select").val();
		const $btn = $(this);

		const url = `/employee/MyInfo/ExportAttendance?Year=${year}&Month=${month}`;

		// Change button text and disable it
		$btn.prop("disabled", true).text("Please wait...");

		// Create a hidden iframe to trigger download without navigating away
		const $iframe = $("<iframe>")
			.hide()
			.attr("src", url)
			.appendTo("body");

		// Optional: Re-enable button after some delay (e.g., 5 seconds)
		setTimeout(() => {
			$btn.prop("disabled", false).text("Export Attendance");
			$iframe.remove(); // Clean up
		}, 5000); // Adjust as needed
	});


	function formatSqlTimeToHoursMinutes(timeStr) {
			if (!timeStr || typeof timeStr !== 'string') return '-';

			const parts = timeStr.split(':');
			if (parts.length < 2) return '-';

			const hours = parseInt(parts[0], 10);
			const minutes = parseInt(parts[1], 10);

			let result = '';
			if (hours > 0) result += `${hours}h `;
			if (minutes > 0) result += `${minutes}m`;

			return result.trim() || '0m';
		}

			$("#search-box").on("keyup", function () {
		const searchText = $(this).val().toLowerCase();
		let visibleCount = 0;

		$("#attendance-data tr").each(function () {
			const rowText = $(this).text().toLowerCase();
			const isMatch = rowText.includes(searchText);
			$(this).toggle(isMatch);
			if (isMatch) visibleCount++;
		});

		updateRecordInfo(visibleCount);
	});
		function updateRecordInfo(visibleCount) {
		const total = $("#attendance-data tr").length;
		const showing = visibleCount;

		$("#record-range-info").text(`Displaying 1 – ${showing} of ${total}`);

		if (showing < 20) {
			$("#pagination-container").addClass("d-none");
		} else {
			$("#pagination-container").removeClass("d-none").css("display", "block");
		}
	}


</script>

