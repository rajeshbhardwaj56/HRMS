@using HRMS.Models
@using HRMS.Models.Common
@using HRMS.Models.WhatsHappeningModel
@model WhatsHappeningModels
@{
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Leave Policy";
    var IconImage = "";
    if (!string.IsNullOrEmpty(Model.IconImage))
    {
        IconImage = Model.IconImage;
    }
    else
    {
        IconImage = HRMS.Models.Common.Constants.NoImagePath;
    }
}

<div class="main-header anim" style="--delay: 0s">  Whats Happening</div>
<form id="AddWhatshappeningForm" method="post" enctype="multipart/form-data">

    <div class="Container">
        @Html.HiddenFor(x=>x.IconImage)
        @Html.HiddenFor(x=>x.WhatsHappeningID)
        <div class="group-box anim" style="--delay: .3s">
            <div class="row">
                <div class="col-md-6 form-group">
                    <label>Title <span class="Mandetory">*</span></label>
                    @Html.TextBoxFor(a => a.Title, new { @class = "form-control", @required = "required" })
                </div>

                
                <div class="col-md-3 form-group">
                    <label>FromDate <span class="Mandetory">*</span></label>
                    @Html.TextBoxFor(a => a.FromDate, "{0:yyyy-MM-dd}", new { @class = "form-control", @type = "date", @required = "required" })
                </div>
                
                
                <div class="col-md-3 form-group">
                    <label>ToDate <span class="Mandetory">*</span></label>
                    @Html.TextBoxFor(a => a.ToDate, "{0:yyyy-MM-dd}", new { @class = "form-control", @type = "date", @required = "required" })

                </div>


                <div class="col-md-12 form-group">
                    <label>Description <span class="Mandetory">*</span></label>
                    @Html.TextAreaFor(a => a.Description, new { @class = "form-control", id = "editor", rows = "10", cols = "50" })

                </div>
                <div class="col-md-4 form-group">
                    <label>Image <span class="Mandetory">*</span></label>
                    <div class="col-md-4">
                        <img id="previewImage" src="@IconImage"
                             onerror="this.onerror=null; this.src='@(HRMS.Models.Common.Constants.NoImagePath)'"
                             style="width:100px; height:100px" />
                    </div>
                    <div class="col-md-8">
                        <input type="file" name="postedFiles" accept="image/*" onchange="showPreview(event)" required />
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-8">
                <input type="submit" value="Submit" class="btn btn-success" />
                <input id="cancelButton" type="button" value="Cancel" class="btn btn-danger" />
            </div>
            <div class="col-md-2">

            </div>
           
        </div>
    </div>
</form>


<script>
    document.getElementById('cancelButton').addEventListener('click', function () {
        window.location.href = '@Url.Action("WhatshappeningListing", "LeavePolicy")';
    });

    ClassicEditor
        .create(document.querySelector('#editor'), {
            toolbar: [
                'heading', '|', 'bold', 'italic', 'link', 'bulletedList',
                'numberedList', 'blockQuote', '|', 'alignment', '|', 'undo', 'redo'
            ],
            alignment: {
                options: ['left', 'center', 'right', 'justify']
            },
            heading: {
                options: [
                    { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },
                    { model: 'heading1', view: 'h1', title: 'Heading 1', class: 'ck-heading_heading1' },
                    { model: 'heading2', view: 'h2', title: 'Heading 2', class: 'ck-heading_heading2' },
                    { model: 'heading3', view: 'h3', title: 'Heading 3', class: 'ck-heading_heading3' }
                ]
            }
        })
        .then(editor => {
            console.log('Editor was initialized', editor);
        })
        .catch(error => {
            console.error(error);
        });
       function showPreview(event) {
        const file = event.target.files[0];
        const maxSizeInMB = 4;
        if (file) {
            const maxSizeInBytes = maxSizeInMB * 1024 * 1024;        
            if (!file.type.startsWith('image/')) {
                alert("Only image files are allowed.");
                event.target.value = "";
                return; 
            }          
            if (file.size > maxSizeInBytes) {
                alert("Image size should not exceed 4MB.");
                event.target.value = "";
                return;
            }         
            const reader = new FileReader();
            reader.onload = function (e) {
                document.getElementById('previewImage').src = e.target.result;
            };
            reader.readAsDataURL(file);
        }
    }
</script>
