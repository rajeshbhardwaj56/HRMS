@using HRMS.Models
@using HRMS.Models.Common
@using HRMS.Models.LeavePolicy;
@model LeavePolicyDetailsModel
@{
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Leave Policy";
    var IconImage = "";
    if (!string.IsNullOrEmpty(Model.PolicyDocument))
    {
        IconImage =Model.PolicyDocument;
    }
    else
    {
        IconImage = HRMS.Models.Common.Constants.NoImagePath;
    }
} 

<div class="main-header anim" style="--delay: 0s">Leave Policy Details
    <a href="/admin/LeavePolicy/PolicyCategoryListing"
       class="btn btn-sm btn-primary addpolicycategory"
       style="font-size: 12px;">
        Add Policy Category
    </a>

</div>
<form id="leaveForm" method="post" enctype="multipart/form-data">

    <div class="Container">

        <div class="group-box anim" style="--delay: .3s">
            @Html.HiddenFor(x => x.Companies)
            @Html.HiddenFor(x => x.PolicyList)
            @Html.HiddenFor(x => x.PolicyDocument)
            <input type="hidden" name="Id" value="@Model.Id">

            <div class="row">
                <div class="col-md-4 form-group">
                    <label>Company <span class="Mandetory">*</span></label>
                    @Html.DropDownList("CompanyID", new SelectList(Model.Companies, "CompanyID", "Name"), " -- Select Company -- ", new { @class = "form-control", placeholder = "" })
                </div>
                <div class="col-md-4 form-group">
                    <label>Title <span class="Mandetory">*</span></label>
                    @Html.TextBoxFor(a => a.Title, new { @class = "form-control", @required = "required" })
                </div>

                <div class="col-md-4 form-group">
                    <div class="d-flex justify-content-between align-items-center mb-1">
                        <label for="PolicyCategoryId" class="mb-0">
                            Policy Category <span class="text-danger">*</span>
                        </label>
                      
                    </div>
                    @Html.DropDownList("PolicyCategoryId", new SelectList(Model.PolicyList, "Id", "Name"), "-- Select Category --", new { @class = "form-control", required = "required" })
                </div>


                <div class="col-md-6">
                    <div class="form-group">
                        <label> Upload Document (Image/Pdf) <span class="Mandetory">*</span></label>
                        <div class="col-md-4">
                            <!-- Image Preview -->
                            <img id="DocumentpreviewImage"
                                 src="@IconImage"
                                 onerror="this.onerror=null; this.src='@(HRMS.Models.Common.Constants.NoImagePath)'"
                                 style="width:100px; height:100px; display:none;" />

                            <!-- PDF Preview -->
                            <iframe id="DocumentpreviewPDF"
                                    src="@IconImage"
                                    style="width:100px; height:100px; display:none;"
                                    frameborder="0">
                            </iframe>
                        </div>
                        <div class="col-md-8">
                            <input type="file"
                                   name="postedFiles"
                                   accept="image/*,.pdf"
                                   onchange="DocumentpreviewPDFPreview(event)" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-12 form-group">
                <label>Description <span class="Mandetory">*</span></label>
                @Html.TextAreaFor(a => a.Description, new { @class = "form-control", id = "editor", rows = "10", cols = "50" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <input type="submit" value="Submit" class="btn btn-success" />
                <input id="cancelButton" type="button" value="Cancel" class="btn btn-danger" />
             </div>
        </div>

        </div>
</form>


<script>
    document.getElementById('cancelButton').addEventListener('click', function () {
        window.location.href = '@Url.Action("LeavePolicyDetailsListing", "LeavePolicy")';
    });  

        ClassicEditor
            .create(document.querySelector('#editor'), {
                toolbar: [
                    'heading', '|', 'bold', 'italic', 'link', 'bulletedList',
                    'numberedList', 'blockQuote', '|', 'alignment', '|', 'undo', 'redo'
                ],
                alignment: {
                    options: ['left', 'center', 'right', 'justify']
                },
                heading: {
                    options: [
                        { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },
                        { model: 'heading1', view: 'h1', title: 'Heading 1', class: 'ck-heading_heading1' },
                        { model: 'heading2', view: 'h2', title: 'Heading 2', class: 'ck-heading_heading2' },
                        { model: 'heading3', view: 'h3', title: 'Heading 3', class: 'ck-heading_heading3' }
                    ]
                }
            })
            .then(editor => {
                console.log('Editor was initialized', editor);
            })
            .catch(error => {
                console.error(error);
            });
        window.onload = function () {
        const fullPath = '@Html.Raw(IconImage)'; // Avoids &amp; encoding
        const filePath = fullPath.toLowerCase();

        const imagePreview = document.getElementById('DocumentpreviewImage');
        const pdfPreview = document.getElementById('DocumentpreviewPDF'); 
        if (filePath.includes('.pdf')) {
            pdfPreview.src = fullPath;
            pdfPreview.style.display = 'block';
            imagePreview.style.display = 'none';
        } else   {
            imagePreview.src = fullPath;
            imagePreview.style.display = 'block';
            pdfPreview.style.display = 'none';
        }


         
    };


    // On file selection, preview image or PDF
    function DocumentpreviewPDFPreview(event) {
        const file = event.target.files[0];
        const imagePreview = document.getElementById('DocumentpreviewImage');
        const pdfPreview = document.getElementById('DocumentpreviewPDF');

        if (file) {
            const fileType = file.type;
            const reader = new FileReader();

            reader.onload = function (e) {
                const result = e.target.result;

                if (fileType.startsWith('image/')) {
                    imagePreview.src = result;
                    imagePreview.style.display = 'block';
                    pdfPreview.style.display = 'none';
                } else if (fileType === 'application/pdf') {
                    pdfPreview.src = result;
                    pdfPreview.style.display = 'block';
                    imagePreview.style.display = 'none';
                } else {
                    alert('Unsupported file type. Please upload an image or a PDF.');
                    imagePreview.style.display = 'none';
                    pdfPreview.style.display = 'none';
                }
            };

            reader.readAsDataURL(file); // Triggers preview
        }
    }

    </script>

     